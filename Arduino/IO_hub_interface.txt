/**
 * Unexpected error occurrences are marked by error code: -1 (UNEXPECTED_ERROR).
 * After each message is received it will first be checked if the command
 * can be executed in the current state. 
 * If the command is used in another state but not the current state we send an error message.
 * Error code, -2(ILLEGAL_COMMAND), will be send
 * If the command is unknown we send error code: -3(UNKNOWN_COMMAND).
 * Commands need to be placed in a buffer if this buffers overload we send error code: -4(BUFFER_FULL)
 */

// commands used in the working state 

/** close_blocker()
 *
 * Closes the pusher to the point where the blocking part is fully extended.
 * Procedure:
 * 0). Call received.
 * 1). Blocker motor on until 2 (direction: close)
 * 2). Blocker touches front side button sensor.
 * 3). Blocker motor on until 4 (direction: open)
 * 4). Blocker no longer touches front side button sensor.
 * 5). Blocker motor off.
 * 6). Send confirm ping.
 *
 * Call nr: 10 (CLOSE_BLOCKER)
 * Expected response: 11 (CONFIRM_CLOSE_BLOCKER)
 */

/** open_blocker()
 * 
 * Opens the blocker entirely.
 * Procedure:
 * 0). Call received.
 * 1). Blocker motor on until 2 (direction: open)
 * 2). Blocker touches back side button sensor.
 * 3). Blocker motor off.
 * 4). Send confirm ping.
 * 
 * Call nr: 50 (OPEN_BLOCKER)
 * Expected response: 51 (CONFIRM_OPEN_BLOCKER)
 */

/**
 * do_push()
 * 
 * Extends the pushing part of the blocker.
 * Procedure:
 * 0). Call received.
 * 1). Start affirm disk
 * 2). Blocker motor on until 2 (direction: close).
 * 3). Blocker touches front side button sensor.
 * 5). Start timer T.
 * 6). T expires specified time.
 * 7). Blocker motor off.
 * 8). Send confirm ping.
 * 
 * Call nr: 30 (DO_PUSH)
 * Expected response: 31 (CONFIRM_DO_PUSH)
 */

/**
 * get_color()
 *
 * Requests the color sensor to measure the current disk and determine and
 * pass the color of this disk.
 * Procedure:
 * 0). Call received.
 * 1). Start scanning.
 * 2). Determine value of disk.
 * 3). Fit value in range (black/white/neither)
 * 4). Send resulting range.
 *
 * Call nr: 20 (GET_COLOR)
 * Expected response: one of the following:
 * - 21 (WHITE)
 * - 22 (BLACK)
 * - 23 (NEITHER)
 */

/** affirm_disk()
 *
 * Requests the secondary color sensor to measure what lies in front of it 
 * and determine and pass the color of the disk (or empty space).
 * Procedure:
 * 0). Call received.
 * 1). Start scanning.
 * 2). Start timer T.
 * 2). Determine value of disk.
 * 3). Fit value in range (black/white/neither).
 * 4). If timer T expires without out vinding disk send NEITHER_AFFIRM.
 * 5). Send resulting range.
 * 
 * Expected response: one of the following:
 * - 41 (WHITE_AFFIRM)
 * - 42 (BLACK_AFFIRM)
 * - 43 (NEITHER_AFFIRM)
 */

/** string_disk()
 *
 * Puts a disk lying in at the bottom of a funnel onto the string.
 * Procedure:
 * 0). Call received.
 * 1). Stringer motor on until 2(direction: retract).
 * 2). Stringer no longer touches button sensor.
 * 3). Stringer motor on until 4(direction: push)
 * 4). Disk string confirmation sensor notices disk.
 * 5). Start timer T.
 * 6). Stringer motor on until 7(direction: push)
 * 7). Disk string confirmation sensor notices absense of disk (before timer T expires).
 * 8). Stringer motor on until 9(direction: retract)
 * 9). Stringer touches button sensor.
 * 10). Send confirm ping. 
 *
 * Alternative procedure:
 * 7'). Timer T expires.
 * 8'). Send error ping.
 * 9'). Enter error state.
 *
 * Call nr: 60 (STRING_DISK)
 * Expected response: 61 (CONFIRM_STRING_DISK)
 * Error ping: 62 (ERROR_STRING_DISK)
 */

/** set_error_state()
 * Moves the arduino program into the error state.
 * Procedure:
 * 0). Call received.
 * 1). Enter the error state.
 * 2). Clear the message buffer.
 * 3). Send message to the control software, 103(ERROR_PING)
 * 4). Set reason_for_error_state to: 'outside signal'.
 *
 * Call nr: 102 (SET_ERROR_STATE)
 */

// commands used in all states

/** ping()
 *
 * Pings the control software for a response ping.
 * Procedure:
 * 0). Ping the control software.
 * 1). Check if we recieve a respnse message.
 * 2). Response message is recieved.
 *
 * alternative flow
 * 2') Resopnse message is not recieved.
 * 3') Enter the error state.
 * 
 * Send nr: 100 (PING)
 * Expected response: 101 (PONG)
 */
 
//commands used in the error state

 
/** exit_error_state()
 * Pings IO hub to exit the error state.
 * Procedure:
 * 0). Call recieved.
 * 1). Restart main loop.
 * 2). Send confirm ping.
 *
 * Send nr: 104 (EXIT_ERROR_STATE)
 * Expected response: 105 (CONFIRM_EXIT_ERROR_STATE)
 */

/** get_error_state_info()
 * Requests data from the IO hub abouth the error state.
 * Procedure:
 * 0). Call recieved.
 * 1). Check if in error state.
 * 2). Check shows that IO hub is in the error state.
 * 3). Send start message ping.
 * 4). Send information to the control software.
 * 5). Send end message ping.
 *
 * Send nr: 106 (GET_ERROR_STATE_INFO)
 * Expected response: 107 (START_MESSAGE), 108(END_MESSAGE)
 */

//commands used in setup state 

/** set_white()
 * Writes the value of what the color sensors currently observe as the
 * value assigned to white.
 * Procedure:
 * 0). Call received.
 * 1). Color sensors start scanning.
 * 2). Color sensors store scanned value as base for future measurement
 *      for white (with a predefined range).
 * 3). Send confirm ping.
 * 
 * Call nr: 200 (SET_WHITE)
 * Expected response: 201 (CONFIRM_SET_WHITE)
 */

/** set_black()
 * Writes the value of what the color sensors currently observe as the
 * value assigned to black.
 * Procedure:
 * 0). Call received.
 * 1). Color sensors start scanning.
 * 2). Color sensors store scanned value as base for future measurement
 *      for black (with a predefined range).
 * 3). Send confirm ping.
 *
 * Call nr: 202 (SET_BLACK)
 * Expected response: 203 (CONFIRM_SET_BLACK)
 */
 
/** exit_setup()
 * Exit the setup stage en enter the working state of the IO hub.
 * Procedure:
 * 0). Call received.
 * 1). Enter the working state.
 * 2). Send confirm ping.
 *
 * Call nr: 204 (EXIT_SETUP)
 * Expected response: 205 (CONFIRM_EXIT_SETUP)
 */
